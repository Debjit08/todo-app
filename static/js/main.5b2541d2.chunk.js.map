{"version":3,"sources":["Components/Tapp.js","App.js","reportWebVitals.js","index.js"],"names":["Tapp","props","state","userInput","list","value","this","setState","id","Math","random","push","key","updateList","filter","item","Container","Row","style","display","justifyContent","alignItems","fontSize","fontWeight","Col","md","span","offset","InputGroup","className","FormControl","placeholder","size","onChange","updateInput","target","aria-label","aria-describedby","Append","Button","variant","onClick","addItem","ListGroup","map","Item","action","deleteItem","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTA+HeA,E,kDAlHf,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAGDC,MAAQ,CACbC,UAAY,GACZC,KAAK,IANa,E,+CAWnB,SAAYC,GACXC,KAAKC,SAAS,CACdJ,UAAWE,M,qBAKZ,WACC,GAA4B,KAAzBC,KAAKJ,MAAMC,UAAkB,CAChC,IAAMA,EAAY,CAGjBK,GAAKC,KAAKC,SAGVL,MAAQC,KAAKJ,MAAMC,WAIdC,EAAI,YAAOE,KAAKJ,MAAME,MAC5BA,EAAKO,KAAKR,GAGVG,KAAKC,SAAS,CACbH,OACAD,UAAU,Q,wBAMZ,SAAWS,GACV,IAGMC,EAHI,YAAOP,KAAKJ,MAAME,MAGJU,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOI,KAGnDN,KAAKC,SAAS,CACdH,KAAKS,M,oBAKN,WAAS,IAAD,OACP,OAAO,eAACG,EAAA,EAAD,WAEN,cAACC,EAAA,EAAD,CAAKC,MAAO,CACVC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,OACVC,WAAY,UALd,2BAUA,uBACA,cAACN,EAAA,EAAD,UACA,cAACO,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAA5B,SAEA,eAACC,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACA,cAACC,EAAA,EAAD,CACCC,YAAY,kBACZC,KAAK,KACL3B,MAASC,KAAKJ,MAAMC,UACpB8B,SAAY,SAAAlB,GAAI,OAAI,EAAKmB,YAAYnB,EAAKoB,OAAO9B,QACjD+B,aAAW,gBACXC,mBAAiB,iBAElB,cAACT,EAAA,EAAWU,OAAZ,UACC,cAACC,EAAA,EAAD,CACAC,QAAQ,OACRR,KAAK,KACLS,QAAW,kBAAI,EAAKC,WAHpB,0BAYH,cAACzB,EAAA,EAAD,UACC,cAACO,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAA5B,SACC,cAACgB,EAAA,EAAD,UAECrC,KAAKJ,MAAME,KAAKwC,KAAI,SAAA7B,GAAS,OAE7B,cAAC4B,EAAA,EAAUE,KAAX,CAAgBL,QAAQ,OAAOM,QAAM,EACrCL,QAAY,kBAAM,EAAKM,WAAWhC,EAAKP,KADvC,SAECO,EAAKV,wB,GAvGU2C,aCCJC,MAVf,WACE,OACE,sBAAKpB,UAAU,MAAf,UACE,sDACH,cAAC,EAAD,QCKYqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5b2541d2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n// Bootstrap for react\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\n\r\nclass Tapp extends Component {\r\nconstructor(props) {\r\n\tsuper(props);\r\n\r\n\t// Setting up state\r\n\tthis.state = {\r\n\tuserInput : \"\",\r\n\tlist:[]\r\n\t}\r\n}\r\n\r\n// Set a user input value\r\nupdateInput(value){\r\n\tthis.setState({\r\n\tuserInput: value,\r\n\t});\r\n}\r\n\r\n// Add item if user input in not empty\r\naddItem(){\r\n\tif(this.state.userInput !== '' ){\r\n\tconst userInput = {\r\n\r\n\t\t// Add a random id which is used to delete\r\n\t\tid : Math.random(),\r\n\r\n\t\t// Add a user value to list\r\n\t\tvalue : this.state.userInput\r\n\t};\r\n\r\n\t// Update list\r\n\tconst list = [...this.state.list];\r\n\tlist.push(userInput);\r\n\r\n\t// reset state\r\n\tthis.setState({\r\n\t\tlist,\r\n\t\tuserInput:\"\"\r\n\t});\r\n\t}\r\n}\r\n\r\n// Function to delete item from list use id to delete\r\ndeleteItem(key){\r\n\tconst list = [...this.state.list];\r\n\r\n\t// Filter values and leave value which we need to delete\r\n\tconst updateList = list.filter(item => item.id !== key);\r\n\r\n\t// Update list in state\r\n\tthis.setState({\r\n\tlist:updateList,\r\n\t});\r\n\r\n}\r\n\r\nrender(){\r\n\treturn(<Container>\r\n\r\n\t\t<Row style={{\r\n\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\talignItems: \"center\",\r\n\t\t\t\tfontSize: '3rem',\r\n\t\t\t\tfontWeight: 'bolder',\r\n\t\t\t\t}}\r\n\t\t\t\t> MY TODO LIST\r\n\t\t\t</Row>\r\n\r\n\t\t<hr/>\r\n\t\t<Row>\r\n\t\t<Col md={{ span: 5, offset: 4 }}>\r\n\r\n\t\t<InputGroup className=\"mb-3\">\r\n\t\t<FormControl\r\n\t\t\tplaceholder=\"add item . . . \"\r\n\t\t\tsize=\"lg\"\r\n\t\t\tvalue = {this.state.userInput}\r\n\t\t\tonChange = {item => this.updateInput(item.target.value)}\r\n\t\t\taria-label=\"add something\"\r\n\t\t\taria-describedby=\"basic-addon2\"\r\n\t\t/>\r\n\t\t<InputGroup.Append>\r\n\t\t\t<Button\r\n\t\t\tvariant=\"dark\"\r\n\t\t\tsize=\"lg\"\r\n\t\t\tonClick = {()=>this.addItem()}\r\n\t\t\t>\r\n\t\t\tADD\r\n\t\t\t</Button>\r\n\t\t</InputGroup.Append>\r\n\t\t</InputGroup>\r\n\r\n\t</Col>\r\n</Row>\r\n<Row>\r\n\t<Col md={{ span: 5, offset: 4 }}>\r\n\t\t<ListGroup>\r\n\t\t{/* map over and print items */}\r\n\t\t{this.state.list.map(item => {return(\r\n\r\n\t\t\t<ListGroup.Item variant=\"dark\" action\r\n\t\t\tonClick = { () => this.deleteItem(item.id) }>\r\n\t\t\t{item.value}\r\n\t\t\t</ListGroup.Item>\r\n\r\n\t\t)})}\r\n\t\t</ListGroup>\r\n\t</Col>\r\n</Row>\r\n\t</Container>\r\n\t);\r\n}\r\n}\r\n\r\nexport default Tapp;\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport Tapp from './Components/Tapp';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello! I'm Debjit ;)</h1>\n\t  <Tapp/>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}